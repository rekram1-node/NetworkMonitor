name: CI/CD
on: [push, pull_request]

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.x
      
      - name: Build
        run: go build .

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{secrets.GH_PAT}}

# name: CI/CD
# on: [push, pull_request]
# jobs:
#   build:
#     name: Build
#     runs-on: ubuntu-latest
#     steps:
#       - name: Set up Go
#         uses: actions/setup-go@v1
#         with:
#           go-version: 1.19

#       - name: Check out source code
#         uses: actions/checkout@v1

#       - name: Build Project
# 				env:
# 					GOPROXY: "https://proxy.golang.org"
#         run: go build .

#       - name: Test
# 				env:
# 					GOPROXY: "https://proxy.golang.org"
#         run: go test -v .

# name: CICD

# on:
#   push:
#     branches:
#     - main
#   pull_request:
#     branches:
#     - main

# jobs:
#   taskInstall:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Install Task
#       uses: arduino/setup-task@v1
#     - name: Build
#       run: |
#         task build

#   build:
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v2

#     - name: Setup Go
#       uses: actions/setup-go@v2
#       with:
#         go-version: '1.19.0' 
    
#     - name: Install dependencies
#       run: |
#         go version
#         go get -u golang.org/x/lint/golint
        
#     - name: Run build
#       run: go build . 
      
#     # Run vet & lint on the code
#     - name: Run vet & lint
#       run: |
#         go vet .
#         golint .
    
#     # Run testing on the code
#     - name: Run testing
#       run: go test -v

#   deploy:
#     runs-on: ubuntu-latest
#     needs: [build]
#     if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
#     steps:
#     - uses: actions/checkout@v2

#     - name: Deploy to Docker registry
#       uses: docker/build-push-action@v1
#       with:
#         username: ${{ secrets.DOCKER_USERNAME }}
#         password: ${{ secrets.DOCKER_PASSWORD }}
#         repository: rekram/network-monitor
#         tag_with_ref: true